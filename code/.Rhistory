source('~/github/xprize/code/script-ggplot-baseline-vs-predicted-many-sync.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-ggplot-baseline-vs-predicted-many-sync.R', echo=TRUE)
source('~/github/xprize/code/script-ggplot-baseline-vs-predicted-many-sync.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
debugSource('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
debugSource('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
joined$y
debugSource('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
debugSource('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
df
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
dt
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities-region.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/estimates-regeneration-v2.R', echo=TRUE)
source("column-list.R")
#signals_to_try <- c(signals_umd,signals_ccfr)
#signals_to_try <- c(signals_umd,signals_ccfr,signals_nsum)
#signals_to_try <- signals_nsum
#signals_to_try <- signals_ccfr
#signals_to_try <- signals_umd_past_smooth
#signals_to_try <- c(umdapi_data,gmob_data)
#signals_to_try <- c(ox_data)
all_signals_to_try <- c(ox_data, owid_data,
gmob_data,
umdapi_data,
cmu_data,
fatal_data,
hosp_data,
W_data,
umdapi_data_smooth,
W_data_smooth)
iso_code_country <- "US"
all_df <- read.csv(paste0("../data/all_giant_df2/", iso_code_country, "-alldf.csv"))
all_signals_to_try
signals_to_try <- intersect(all_signals_to_try, colnames(all_df))
all_signals_to_try
colnames(all_df)
intersect(c("a", "b"), c("b"))
all_signals_to_try
colnames(all_df)
intersect(all_signals_to_try, colnames(all_df))
signals_to_try <- intersect(all_signals_to_try, colnames(all_df))
signals_to_try
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
#signals_to_try <- c(signals_umd,signals_ccfr)
#signals_to_try <- c(signals_umd,signals_ccfr,signals_nsum)
#signals_to_try <- signals_nsum
#signals_to_try <- signals_ccfr
#signals_to_try <- signals_umd_past_smooth
#signals_to_try <- c(umdapi_data,gmob_data)
#signals_to_try <- c(ox_data)
all_signals_to_try <- c(ox_data, owid_data,
gmob_data,
umdapi_data,
cmu_data,
fatal_data,
hosp_data,
W_data,
umdapi_data_smooth,
W_data_smooth)
iso_code_country <- "PT"
all_df <- read.csv(paste0("../data/all_giant_df2/", iso_code_country, "-alldf.csv"))
all_df <- all_df %>% mutate(date = as.Date(date))
signals_to_try <- intersect(all_signals_to_try, colnames(all_df))
signals_to_try <- signals_to_try[length(unique(all_df[[signals_to_try]])) > 1]
for (s in signals_to_try){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[signals_to_try != s]
}
}
signals_to_try
s <- "m1_wildcard"
lll <- unique(all_df[[s]])
lll
length(lll)
if (length(lll)< 2) {
signals_to_try <- signals_to_try[signals_to_try != s]
cat("yes")
}
if (length(lll)< 2) {
signals_to_try <- signals_to_try[-s]
cat("yes")
}
sss <- signals_to_try
for (s in sss){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[-s]
cat("yes")
}
}
#signals_to_try <- c(signals_umd,signals_ccfr)
#signals_to_try <- c(signals_umd,signals_ccfr,signals_nsum)
#signals_to_try <- signals_nsum
#signals_to_try <- signals_ccfr
#signals_to_try <- signals_umd_past_smooth
#signals_to_try <- c(umdapi_data,gmob_data)
#signals_to_try <- c(ox_data)
all_signals_to_try <- c(ox_data, owid_data,
gmob_data,
umdapi_data,
cmu_data,
fatal_data,
hosp_data,
W_data,
umdapi_data_smooth,
W_data_smooth)
source("column-list.R")
#signals_to_try <- c(signals_umd,signals_ccfr)
#signals_to_try <- c(signals_umd,signals_ccfr,signals_nsum)
#signals_to_try <- signals_nsum
#signals_to_try <- signals_ccfr
#signals_to_try <- signals_umd_past_smooth
#signals_to_try <- c(umdapi_data,gmob_data)
#signals_to_try <- c(ox_data)
all_signals_to_try <- c(ox_data, owid_data,
gmob_data,
umdapi_data,
cmu_data,
fatal_data,
hosp_data,
W_data,
umdapi_data_smooth,
W_data_smooth)
iso_code_country <- "PT"
all_df <- read.csv(paste0("../data/all_giant_df2/", iso_code_country, "-alldf.csv"))
all_df <- all_df %>% mutate(date = as.Date(date))
## Libraries
library(dplyr)
library(stringr)
library(zoo) # to use rollmean
library(foreign)
library(MASS)
library(ggplot2)
library(grid) # annotate a ggplot
library(Metrics)
library(mpath) # lasso/elastic-net
library(caret)
library(gsubfn)
## Libraries
library(dplyr)
library(stringr)
library(zoo) # to use rollmean
library(foreign)
library(MASS)
library(ggplot2)
library(grid) # annotate a ggplot
library(Metrics)
library(mpath) # lasso/elastic-net
library(caret)
library(gsubfn)
source("column-list.R")
#signals_to_try <- c(signals_umd,signals_ccfr)
#signals_to_try <- c(signals_umd,signals_ccfr,signals_nsum)
#signals_to_try <- signals_nsum
#signals_to_try <- signals_ccfr
#signals_to_try <- signals_umd_past_smooth
#signals_to_try <- c(umdapi_data,gmob_data)
#signals_to_try <- c(ox_data)
all_signals_to_try <- c(ox_data, owid_data,
gmob_data,
umdapi_data,
cmu_data,
fatal_data,
hosp_data,
W_data,
umdapi_data_smooth,
W_data_smooth)
iso_code_country <- "PT"
all_df <- read.csv(paste0("../data/all_giant_df2/", iso_code_country, "-alldf.csv"))
all_df <- all_df %>% mutate(date = as.Date(date))
signals_to_try <- intersect(all_signals_to_try, colnames(all_df))
sss <- signals_to_try
for (s in sss){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[-s]
cat("yes")
}
}
for (s in sss){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[signals_to_try != s]
cat("yes")
}
}
for (s in signals_to_try){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[signals_to_try != s]
}
}
all_df <- read.csv(paste0("../data/all_giant_df2/", iso_code_country, "-alldf.csv"))
all_df <- all_df %>% mutate(date = as.Date(date))
signals_to_try <- intersect(all_signals_to_try, colnames(all_df))
sss <- signals_to_try
for (s in signals_to_try){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[signals_to_try != s]
}
}
signals_to_try
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
seq(5 , 9)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
install.packages("forecast")
install.packages(c("forecast", "fpp2", "TTR"))
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
## script needs file for country and country population.
library(tidyverse)
library(readxl)
library(httr)
# Download data from the Oxford site
try(source("script-get-oxford-data.R"), silent = T)
# Download data from the Our World in Data site
try(source("script-get-owid-data.R"), silent = T)
# Download data from the UMD site using the API. Includes smoothing (not past smoothing, too slow)
try(source("script-get-umd-data-country.R"), silent = T)
# Download the data about confirmed cases, deaths, hospital, icu, etc. and accumulate for weeks
try(source("script-confirmed2.R"), silent = T) # Downloads all country cases and deaths from ECDC
try(source("script-confirmed-hospital.R"), silent = T) # Downloads hospital and ICU occupancy from ECDC
# Compute CCFR fatalities estimates
try(source("script-ccfr-fatalities-country.R"), silent = T) # Generates CCFR fatalities estimates for all countries from Oxford data
try(source("script-ccfr-fatalities-region.R"), silent = T) # Generates CCFR fatalities estimates for all countries from Oxford data
# Compute estimates from the CoronaSurveys responses
try(source("script-W-v2.R"), silent = T)
#try(source("script-W-past-smooth.R"), silent = T)  # Uses smooth_column-v2.R
try(source("script-W-smooth.R"), silent = T)  # Uses smooth_column-v2.R
# Download data from the CMU Covidcast site: US states data
try(source("script-get-CMU-covidcast-data2.R"), silent = T)
# Download data from Gloogle mobility
try(source("script-get-google-mobility-data.R"), silent = T)
# Merge data into giant CSV files per country and region
try(source("script-stitch-country-data.R"), silent = T)
try(source("script-stitch-region-data.R"), silent = T)
source('~/github/xprize/code/script-get-CMU-covidcast-data2.R', echo=TRUE)
source('~/github/xprize/code/script-get-CMU-covidcast-data2.R', echo=TRUE)
# Merge data into giant CSV files per country and region
try(source("script-stitch-country-data.R"), silent = T)
try(source("script-stitch-region-data.R"), silent = T)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
df
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
dim(df)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/forecast-mixed.R', echo=TRUE)
source('~/github/xprize/code/estimates-regeneration-v2.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/estimates-regeneration-v2.R', echo=TRUE)
install.packages("R0")
## script needs file for country and country population.
library(tidyverse)
library(readxl)
library(httr)
# Download data from the Oxford site
try(source("script-get-oxford-data.R"), silent = T)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
colnames(data_ox)
colnames(data_ox)<-str_replace_all(colnames(data_ox), c(" " = "."))
data_ox <- data_ox %>%
select(CountryName, RegionName, Date, C1_School.closing,	C2_Workplace.closing,
C3_Cancel.public.events,	C4_Restrictions.on.gatherings, C5_Close.public.transport,
C6_Stay.at.home.requirements,	C7_Restrictions.on.internal.movement,
C8_International.travel.controls, H1_Public.information.campaigns,
H2_Testing.policy,	H3_Contact.tracing, H6_Facial.Coverings)
colnames(data_ox)
data_ox <- data_ox %>%
select(CountryName, RegionName, Date, C1_School.closing,	C2_Workplace.closing,
C3_Cancel.public.events,	C4_Restrictions.on.gatherings, C5_Close.public.transport,
C6_Stay.at.home.requirements,	C7_Restrictions.on.internal.movement,
C8_International.travel.controls, H1_Public.information.campaigns,
H2_Testing.policy,	H3_Contact.tracing, H6_Facial.Coverings)
# load library
library(dplyr)
library(ggplot2)
library(httr)
library(jsonlite)
library(stringr)
library(data.table)
library(R0) # reproductive number
# Function to compute R:
errors_Rt_country <- c()
errors_Rt_region <- c()
var_to_Rt = "avgcases7days"
do_Rt <- function(df, var_to_Rt = "cases", gamma_mean = 5.20, gamma_sd = 1.72) {
# generation and serial interval distributions, taken from:
# https://www.eurosurveillance.org/content/10.2807/1560-7917.ES.2020.25.17.2000257
# Dataset	        Scenario	Interval	Estimate (95% credible interval) (days)
#                               Mean	                  SD
# Singapore	      Baseline	GI	5.20 (3.78 - 6.78)	  1.72 (0.91 - 3.93)
#                           SI	5.21 (???3.35 - 13.94)	4.32 (4.06 - 5.58)
# Tianjin (China)	Baseline	GI	3.95 (3.01 - 4.91)	  1.51 (0.74 - 2.97)
#                           SI	3.95 (???4.47 - 12.51)	4.24 (4.03 - 4.95)
cat("-> computing Rt: using signal", var_to_Rt, "\n")
# select the target to compute Rt
temp_for_R0 <- df[, var_to_Rt]
# assign dates to rows
names(temp_for_R0) <- df$Date
# first non-zero elements:
indx <- which(temp_for_R0 != 0)
temp_for_R0 <- temp_for_R0[indx[1L]:indx[length(indx)]]
# generation time function
GT_covid <- generation.time("gamma", c(gamma_mean,gamma_sd))
res_R <- estimate.R(temp_for_R0,
GT = GT_covid,
t = as.Date(names(temp_for_R0)),
begin = (head(temp_for_R0, 1) %>%  names()),
end = (tail(temp_for_R0, 1) %>%  names()),
pop.size = max(df$population),
# methods = c("EG","ML","SB","TD"))
methods = c("TD"))
# save the results to a single data frame:
Rt_CI <- res_R[["estimates"]][["TD"]][["conf.int"]] %>%
transmute(Rt = res_R[["estimates"]][["TD"]][["R"]],
Rt_lower = lower,
Rt_upper = upper,
Date = as.Date(rownames(res_R[["estimates"]][["TD"]][["conf.int"]])))
colnames(Rt_CI)[1:3] <- paste0(colnames(Rt_CI)[1:3], "_", var_to_Rt)
df_out <- left_join(df, Rt_CI, by = "Date")
return(df_out)
}
DATA_URL = "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
country_file <- "../data/common-data/oxford-countries.csv"
region_file <- "../data/common-data/oxford-regions-population.csv"
data_file <- "https://raw.githubusercontent.com/GCGImdea/coronasurveys/master/data/common-data/oxford-umd-country-population.csv"
output_path = "../data/oxford/"
IPS_output_path = "../work/"
data_ox <- read.csv(DATA_URL)
cat("::- script-confirmed: Oxford data available! ::\n")
colnames(data_ox)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
