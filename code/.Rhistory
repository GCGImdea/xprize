#
# write.csv(df_save,
#           paste0("../data/estimates-umd-symptom-survey/", country_code , "-estimate.csv"),
#           row.names = FALSE)
## Some plots
# df_out$d = paste0("d = ", df_out$b_size_denom)
# p1 <- ggplot(data = df_out, aes(x = date, colour = Legend)) +
#   facet_wrap( ~ d, scales = "free_y" ) +
#   geom_point(aes(y = batched_pct_cli, colour = "Batched CSDC CLI"), alpha = 0.5, size = 2) +
#   geom_line(aes(y = batched_pct_cli_smooth, colour = "Batched CSDC CLI (smooth)"),
#             linetype = "solid", size =1, alpha = 0.6) +
#   geom_ribbon(aes(ymin = batched_pct_cli_smooth_low,
#                   ymax = batched_pct_cli_smooth_high),
#               alpha = 0.1, color = "blue", size = 0.1, fill = "blue") +
#   geom_point(aes(y = pct_cli, colour = "CSDC CLI"), alpha = 0.2, size = 2) +
#   geom_line(aes(y = pct_cli_smooth, colour = "CSDC CLI (smooth)"),
#             linetype = "solid", size = 1, alpha = 0.6) +
#   geom_ribbon(aes(ymin = pct_cli_smooth_low,
#                   ymax = pct_cli_smooth_high),
#               alpha = 0.1, color = "red", size = 0.1, fill = "red") +
#   geom_point(aes(y = pct_cli, colour = "d = population / batch size"), alpha = 0) +
#   theme_bw() +
#   scale_colour_manual(values = c("blue", "blue", "red", "red", "black"),
#                       guide = guide_legend(override.aes = list(
#                         linetype = c("blank", "solid", "blank", "solid", "blank"),
#                         shape = c(1, NA, 1, NA, NA)))) +
#   xlab("Date") + ylab("% symptomatic cases") + ggtitle(country) +
#   theme(legend.position = "bottom")
# p1
# ggsave(plot = p1,
#        filename =  paste0("../data/estimates-umd-symptom-survey/plots/", country_code , "-plots-by-batch.png"),
#        width = 9, height = 6)
} # end-for-countries_2_try
} #end-function: umd_batch_symptom_country
## Available countries ----
countries <- read.csv("../data/common-data/oxford-umd-country-population.csv",
header = T)
x <- countries$country_umd
x <- stri_remove_empty_na(x)
x <- x[x != "Burkina Faso"]
countries_b <- c("Burkina Faso")
umd_batch_symptom_country(countries_b)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
## Libraries
library(dplyr)
library(ggplot2)
library(httr)
library(jsonlite)
library(stringr)
library(stringi)
## Load smoothing function ----
source("smooth_column_past.R")
smooth_param <- 25
## Function to extract updated data from UMD api: ----
UMD_api <- function(country, type = "daily", indicator = "covid", date_start = NA, date_end = NA){
country <- str_replace_all(country, " ", "%")
# first date available:
if (is.na(date_start)) {
request <- GET(url = paste0("https://covidmap.umd.edu/api/datesavail?country=",
country,"%"))
# make sure the content is encoded with 'UTF-8'
response <- content(request, as = "text", encoding = "UTF-8")
# now we can have a dataframe for use!
date_start <- fromJSON(response, flatten = TRUE) %>% data.frame()
date_start = min(date_start$data.survey_date)
}
# today:
if (is.na(date_end)) {
date_end = format(Sys.time(), "%Y%m%d")
}
# adding url
path <- paste0("https://covidmap.umd.edu/api/resources?indicator=", indicator,
"&type=", type,
"&country=", country,
"&daterange=", date_start, "-", date_end)
# request data from api
request <- GET(url = path)
# make sure the content is encoded with 'UTF-8'
response <- content(request, as = "text", encoding = "UTF-8")
# now we can have a dataframe for use!
coviddata <- fromJSON(response, flatten = TRUE) %>% data.frame()
return(coviddata)
}
umd_batch_symptom_country <- function(countries_2_try){
for (country in countries_2_try) {
print(paste0("Downloading and smoothing: ", country, "'s UMD data"))
## Load data
# Indicator covid , flu , mask ,contact or finance
dt <- UMD_api(country, indicator = "covid")
# remove "data." from column names:
colnames(dt) <- str_replace_all(colnames(dt), "data.", "")
# set dates:
dt <- dt %>% mutate(date = paste0( str_sub(survey_date, 1, 4), "-",
str_sub(survey_date, 5, 6), "-",
str_sub(survey_date, 7, 8))) %>%
mutate(date = as.Date(date)) %>%
select(date, iso_code, country, sample_size, percent_cli, cli_se, percent_cli_unw, cli_se_unw)
dt_aux <- UMD_api(country, indicator = "flu")
colnames(dt_aux) <- str_replace_all(colnames(dt_aux), "data.", "")
dt_aux <- dt_aux %>% mutate(date = paste0( str_sub(survey_date, 1, 4), "-",
str_sub(survey_date, 5, 6), "-",
str_sub(survey_date, 7, 8))) %>%
mutate(date = as.Date(date)) %>%
select(date, percent_ili, ili_se, percent_ili_unw, ili_se_unw)
dt <- dt %>% full_join(dt_aux, by = "date")
cat("here2 \n")
dt_aux <- UMD_api(country, indicator = "mask")
colnames(dt_aux) <- str_replace_all(colnames(dt_aux), "data.", "")
dt_aux <- dt_aux %>% mutate(date = paste0( str_sub(survey_date, 1, 4), "-",
str_sub(survey_date, 5, 6), "-",
str_sub(survey_date, 7, 8))) %>%
mutate(date = as.Date(date)) %>%
select(date, percent_mc, mc_se, percent_mc_unw, mc_se_unw)
dt <- dt %>% full_join(dt_aux, by = "date")
dt_aux <- UMD_api(country, indicator = "contact")
colnames(dt_aux) <- str_replace_all(colnames(dt_aux), "data.", "")
dt_aux <- dt_aux %>% mutate(date = paste0( str_sub(survey_date, 1, 4), "-",
str_sub(survey_date, 5, 6), "-",
str_sub(survey_date, 7, 8))) %>%
mutate(date = as.Date(date)) %>%
select(date, percent_dc, dc_se=mc_se, percent_dc_unw, dc_se_unw)
dt <- dt %>% full_join(dt_aux, by = "date")
dt_aux <- UMD_api(country, indicator = "finance")
colnames(dt_aux) <- str_replace_all(colnames(dt_aux), "data.", "")
dt_aux <- dt_aux %>% mutate(date = paste0( str_sub(survey_date, 1, 4), "-",
str_sub(survey_date, 5, 6), "-",
str_sub(survey_date, 7, 8))) %>%
mutate(date = as.Date(date)) %>%
select(date, percent_hf, hf_se, percent_hf_unw, hf_se_unw)
dt <- dt %>% full_join(dt_aux, by = "date")
# # remove "data." from column names:
# colnames(dt) <- str_replace_all(colnames(dt), "data.", "")
#
# # set dates:
# dt <- dt %>% mutate(date = paste0( str_sub(survey_date, 1, 4), "-",
#                                    str_sub(survey_date, 5, 6), "-",
#                                    str_sub(survey_date, 7, 8))) %>%
#   mutate(date = as.Date(date))
# %>%
# select(date, iso_code, country, sample_size, percent_cli, cli_se, percent_cli_unw, cli_se_unw)
# rename columns to use Fb. Challenge scripts:
#colnames(dt) <- c("date", "pct_cli_weighted", "pct_cli", "total_responses")
# # I THINK pct_cli IS NOW A RATIO IN [0,1] NOT A %:
# summary(dt$pct_cli)
# summary(dt$pct_cli_weighted)
# # transform it to emulate Fb Challenge analysis:
# dt$pct_cli <- dt$pct_cli*100
# dt$pct_cli_weighted <- dt$pct_cli_weighted*100
# number of infected:
#dt$number_cli <- dt$total_responses*dt$pct_cli/100
to_smooth <- c("percent_cli", "percent_cli_unw",
"percent_ili", "percent_ili_unw",
"percent_mc", "percent_mc_unw",
"percent_dc", "percent_dc_unw",
"percent_hf", "percent_hf_unw")
for (col in to_smooth) {
cat("Smoothing ", col, "\n")
try(
dt <- smooth_column_past(dt, col,
basis_dim = smooth_param,
link_in ="log", monotone = F)
, silent = F)
}
# add population:
dt$population <- countries[countries$country==country, "population"]
country_code <- countries[countries$country==country, "CountryCode"]
write.csv(dt,
paste0("../data/estimates-umd-symptom-survey/", country_code , "-estimate.csv"),
row.names = FALSE)
# df_out <- batch_effect(df_batch_in = dt,
#                        denom2try = denom_2_try) # denom2try = seq(1000, 5000, by = 500)
#
# # df_out$p_cases_active <- df_out$batched_pct_cli_smooth/100
# # df_out$p_cases_active_high <- df_out$batched_pct_cli_smooth_high/100
# # df_out$p_cases_active_low <- df_out$batched_pct_cli_smooth_low/100
#
# df_out$date <- as.Date(gsub("-", "/", df_out$date))
#
# # select a single batch size:
# df_save <- df_out %>% filter(b_size_denom == d_to_save)
#
# country_code <- countries[countries$country==country, "iso_alpha3"]
#
# write.csv(df_save,
#           paste0("../data/estimates-umd-symptom-survey/", country_code , "-estimate.csv"),
#           row.names = FALSE)
## Some plots
# df_out$d = paste0("d = ", df_out$b_size_denom)
# p1 <- ggplot(data = df_out, aes(x = date, colour = Legend)) +
#   facet_wrap( ~ d, scales = "free_y" ) +
#   geom_point(aes(y = batched_pct_cli, colour = "Batched CSDC CLI"), alpha = 0.5, size = 2) +
#   geom_line(aes(y = batched_pct_cli_smooth, colour = "Batched CSDC CLI (smooth)"),
#             linetype = "solid", size =1, alpha = 0.6) +
#   geom_ribbon(aes(ymin = batched_pct_cli_smooth_low,
#                   ymax = batched_pct_cli_smooth_high),
#               alpha = 0.1, color = "blue", size = 0.1, fill = "blue") +
#   geom_point(aes(y = pct_cli, colour = "CSDC CLI"), alpha = 0.2, size = 2) +
#   geom_line(aes(y = pct_cli_smooth, colour = "CSDC CLI (smooth)"),
#             linetype = "solid", size = 1, alpha = 0.6) +
#   geom_ribbon(aes(ymin = pct_cli_smooth_low,
#                   ymax = pct_cli_smooth_high),
#               alpha = 0.1, color = "red", size = 0.1, fill = "red") +
#   geom_point(aes(y = pct_cli, colour = "d = population / batch size"), alpha = 0) +
#   theme_bw() +
#   scale_colour_manual(values = c("blue", "blue", "red", "red", "black"),
#                       guide = guide_legend(override.aes = list(
#                         linetype = c("blank", "solid", "blank", "solid", "blank"),
#                         shape = c(1, NA, 1, NA, NA)))) +
#   xlab("Date") + ylab("% symptomatic cases") + ggtitle(country) +
#   theme(legend.position = "bottom")
# p1
# ggsave(plot = p1,
#        filename =  paste0("../data/estimates-umd-symptom-survey/plots/", country_code , "-plots-by-batch.png"),
#        width = 9, height = 6)
} # end-for-countries_2_try
} #end-function: umd_batch_symptom_country
## Available countries ----
countries <- read.csv("../data/common-data/oxford-umd-country-population.csv",
header = T)
x <- countries$country_umd
x <- stri_remove_empty_na(x)
x <- x[x != "Burkina Faso"]
countries_b <- x
countries_b
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
response
country <- "Burkina Faso"
country <- str_replace_all(country, " ", "%")
# first date available:
if (is.na(date_start)) {
request <- GET(url = paste0("https://covidmap.umd.edu/api/datesavail?country=",
country,"%"))
# make sure the content is encoded with 'UTF-8'
response <- content(request, as = "text", encoding = "UTF-8")
# now we can have a dataframe for use!
date_start <- fromJSON(response, flatten = TRUE) %>% data.frame()
date_start = min(date_start$data.survey_date)
}
country <- "Burkina Faso"
country <- str_replace_all(country, " ", "%")
request <- GET(url = paste0("https://covidmap.umd.edu/api/datesavail?country=",
country,"%"))
request
# make sure the content is encoded with 'UTF-8'
response <- content(request, as = "text", encoding = "UTF-8")
response
country <- "Benin"
country <- str_replace_all(country, " ", "%")
request <- GET(url = paste0("https://covidmap.umd.edu/api/datesavail?country=",
country,"%"))
# make sure the content is encoded with 'UTF-8'
response <- content(request, as = "text", encoding = "UTF-8")
response
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed-hospital.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed-hospital.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed-hospital.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed-hospital.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed-hospital.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed-hospital.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed-hospital.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed-hospital.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed-hospital.R', echo=TRUE)
# Download the data about confirmed cases, deaths, hospital, icu, etc. and accumulate for weeks
try(source("script-confirmed2.R"), silent = T) # Downloads all country cases and deaths from ECDC
source('~/github/xprize/code/script-confirmed2.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed2.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-based3.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-based3.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
# Download data from the UMD site using the API. Includes past smoothing
# NOTE: Takes several hours (past_smoothing is slow)
try(source("script-get-umd-data-country.R"), silent = T)
source('~/github/xprize/code/script-W-v2.R', echo=TRUE)
source('~/github/xprize/code/script-W-v2.R', echo=TRUE)
try(source("script-W-past-smooth.R"), silent = T)  # Uses smooth_column-v2.R
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed2.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
# Download data from the UMD site using the API. Includes past smoothing
# NOTE: Takes several hours (past_smoothing is slow)
try(source("script-get-umd-data-country.R"), silent = T)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed2.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed2.R', echo=TRUE)
source('~/github/xprize/code/script-confirmed2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-data-v2.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/script-W-v2.R', echo=TRUE)
source('~/github/xprize/code/script-W-v2.R', echo=TRUE)
r <- "GBENG"
#   df_aux[["p_cases"]][is.na(df_aux[["p_cases"]])] <- 0
#   if (sum(df_aux$p_cases != 0) > smooth_param) {
#     df_aux <- smooth_column(df_aux, "p_cases", smooth_param)
#   }
#   df_aux[["p_cases_recent"]][is.na(df_aux[["p_cases_recent"]])] <- 0
#   if (sum(df_aux$p_cases_recent != 0) > smooth_param) {
#     df_aux <- smooth_column(df_aux, "p_cases_recent", smooth_param)
#   }
r<- gsub('^([a-z]{2})([a-z]+)$', '\\1-\\2', r)
r
#   df_aux[["p_cases"]][is.na(df_aux[["p_cases"]])] <- 0
#   if (sum(df_aux$p_cases != 0) > smooth_param) {
#     df_aux <- smooth_column(df_aux, "p_cases", smooth_param)
#   }
#   df_aux[["p_cases_recent"]][is.na(df_aux[["p_cases_recent"]])] <- 0
#   if (sum(df_aux$p_cases_recent != 0) > smooth_param) {
#     df_aux <- smooth_column(df_aux, "p_cases_recent", smooth_param)
#   }
r<- gsub('^([A-Z]{2})([A-Z]+)$', '\\1-\\2', r)
r
source('~/github/xprize/code/script-W-v2.R', echo=TRUE)
source('~/github/xprize/code/script-W-v2.R', echo=TRUE)
source('~/github/xprize/code/script-W-v2.R', echo=TRUE)
source('~/github/xprize/code/script-W-past-smooth.R', echo=TRUE)
source('~/github/xprize/code/script-W-past-smooth.R', echo=TRUE)
source('~/github/xprize/code/script-W-past-smooth.R', echo=TRUE)
source('~/github/xprize/code/script-W-past-smooth.R', echo=TRUE)
source('~/github/xprize/code/script-W-past-smooth.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-W-v2.R', echo=TRUE)
try(source("script-W-past-smooth.R"), silent = T)  # Uses smooth_column-v2.R
#try(source("script-W-past-smooth.R"), silent = T)  # Uses smooth_column-v2.R
try(source("script-W-smooth.R"), silent = T)  # Uses smooth_column-v2.R
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-umd-data-country.R', echo=TRUE)
# Merge data into giant CSV files per country and region
try(source("script-stitch-country-data.R"), silent = T)
try(source("script-stitch-region-data.R"), silent = T)
# Download data from the Oxford site
try(source("script-get-oxford-data.R"), silent = T)
# Download data from the UMD site using the API. Includes smoothing (not past smoothing, too slow)
try(source("script-get-umd-data-country.R"), silent = T)
# Download the data about confirmed cases, deaths, hospital, icu, etc. and accumulate for weeks
try(source("script-confirmed2.R"), silent = T) # Downloads all country cases and deaths from ECDC
try(source("script-confirmed-hospital.R"), silent = T) # Downloads hospital and ICU occupancy from ECDC
# Compute CCFR estimates
try(source("script-ccfr-based3.R"), silent = T) # Generates CCFR estimates for all countries from Oxford data
# Compute estimates from the CoronaSurveys responses
try(source("script-W-v2.R"), silent = T)
#try(source("script-W-past-smooth.R"), silent = T)  # Uses smooth_column-v2.R
try(source("script-W-smooth.R"), silent = T)  # Uses smooth_column-v2.R
# Merge data into giant CSV files per country and region
try(source("script-stitch-country-data.R"), silent = T)
try(source("script-stitch-region-data.R"), silent = T)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
cumsum(1:10)
diff(1:10, lag = 7))
diff(1:10, lag = 7)
diff(1:10, lag = 4)
diff(c(1:10), lag = 4)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/script-get-owid-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-owid-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-owid-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-owid-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-owid-data.R', echo=TRUE)
# Download data from the Oxford site
try(source("script-get-oxford-data.R"), silent = T)
# Download data from the Our World in Data site
try(source("script-get-owid-data.R"), silent = T)
# Download data from the UMD site using the API. Includes smoothing (not past smoothing, too slow)
try(source("script-get-umd-data-country.R"), silent = T)
# Download the data about confirmed cases, deaths, hospital, icu, etc. and accumulate for weeks
try(source("script-confirmed2.R"), silent = T) # Downloads all country cases and deaths from ECDC
try(source("script-confirmed-hospital.R"), silent = T) # Downloads hospital and ICU occupancy from ECDC
# Compute CCFR estimates
try(source("script-ccfr-based3.R"), silent = T) # Generates CCFR estimates for all countries from Oxford data
# Compute estimates from the CoronaSurveys responses
try(source("script-W-v2.R"), silent = T)
#try(source("script-W-past-smooth.R"), silent = T)  # Uses smooth_column-v2.R
try(source("script-W-smooth.R"), silent = T)  # Uses smooth_column-v2.R
# Merge data into giant CSV files per country and region
try(source("script-stitch-country-data.R"), silent = T)
try(source("script-stitch-region-data.R"), silent = T)
source('~/github/xprize/code/script-ccfr-based3.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-based3.R', echo=TRUE)
try(source("script-ccfr-based-region.R"), silent = T) # Generates CCFR estimates for all countries from Oxford data
try(source("script-ccfr-based-region.R"), silent = T) # Generates CCFR estimates for all countries from Oxford data
try(source("script-ccfr-based-region.R"), silent = T) # Generates CCFR estimates for all countries from Oxford data
source('~/github/xprize/code/script-ccfr-based-region.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-based-region.R', echo=TRUE)
# Merge data into giant CSV files per country and region
try(source("script-stitch-country-data.R"), silent = T)
try(source("script-stitch-region-data.R"), silent = T)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
install.packages("remotes")
remotes::install_github("yangjl/quantgen")
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
