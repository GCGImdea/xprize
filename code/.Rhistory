all_countries <- all_countries[!is.na(all_countries)]
all_countries
source('~/github/xprize/code/script-get-google-mobility-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-google-mobility-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-google-mobility-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-google-mobility-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-google-mobility-data.R', echo=TRUE)
# load library
library(dplyr)
library(ggplot2)
library(httr)
library(jsonlite)
library(stringr)
library(data.table)
#DATA_URL = "https://www.gstatic.com/covid19/mobility/Global_Mobility_Report.csv"
DATA_URL = "/Users/anto/Downloads/Global_Mobility_Report.csv"
output_path = "../data/google-mobility/"
df_country <- read.csv(DATA_URL)
cat("::- script-confirmed: Google Mobility data is available! ::\n")
df_country <- df_country[!is.na(df_country$country_region_code),] # There are rows with (country_region_code = NA)
all_countries <- unique(df_country$country_region_code)
all_countries <- all_countries[!is.na(all_countries)]
for (country in all_countries) {
cat("Processing", country)
df <- df_country[df_country$country_region_code == country,]
df <- df[df$sub_region_1 == "",]
cat(" rows: ", nrow(df), "\n")
write.csv(df, paste0(output_path, country, "-estimate.csv"),
row.names = FALSE)
}
for (country in all_countries) {
cat("Processing", country)
df <- df_country[df_country$country_region_code == country,]
df <- df[df$sub_region_1 == "",]
df <- df[df$sub_region_2 == "",]
df <- df[df$metro_area == "",]
df <- df[df$iso_3166_2_code == "",]
cat(" rows: ", nrow(df), "\n")
write.csv(df, paste0(output_path, country, "-estimate.csv"),
row.names = FALSE)
}
df_country$iso_3166_2_code <- gsub("-", "_", df_country$iso_3166_2_code)
all_regions <- unique(df_country$iso_3166_2_code)
all_regions <- all_regions[all_regions != ""]
all_regions <- all_regions[!is.na(all_regions)]
all_regions
for (region in all_regions) {
cat("Processing", region, "\n")
df <- df_country[df_country$iso_3166_2_code == region,]
cat("with regions ", nrow(df), "\n")
write.csv(df, paste0(output_path, region, "-estimate.csv"),
row.names = FALSE)
}
source('~/github/xprize/code/script-get-google-mobility-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
install.packages("fdaoutlier")
install.packages(c("caret", "gsubfn", "mpath"))
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-ggplot-baseline-vs-predicted-many-sync.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-ggplot-baseline-vs-predicted-many-sync.R', echo=TRUE)
source('~/github/xprize/code/script-ggplot-baseline-vs-predicted-many-sync.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
# Download data from the Oxford site
try(source("script-get-oxford-data.R"), silent = T)
# Download data from the Our World in Data site
try(source("script-get-owid-data.R"), silent = T)
# Download data from the UMD site using the API. Includes smoothing (not past smoothing, too slow)
try(source("script-get-umd-data-country.R"), silent = T)
# Download the data about confirmed cases, deaths, hospital, icu, etc. and accumulate for weeks
try(source("script-confirmed2.R"), silent = T) # Downloads all country cases and deaths from ECDC
try(source("script-confirmed-hospital.R"), silent = T) # Downloads hospital and ICU occupancy from ECDC
# Compute estimates from the CoronaSurveys responses
try(source("script-W-v2.R"), silent = T)
#try(source("script-W-past-smooth.R"), silent = T)  # Uses smooth_column-v2.R
try(source("script-W-smooth.R"), silent = T)  # Uses smooth_column-v2.R
# Download data from the CMU Covidcast site: US states data
try(source("script-get-CMU-covidcast-data2.R"), silent = T)
# Download data from Gloogle mobility
try(source("script-get-google-mobility-data.R"), silent = T)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
# Merge data into giant CSV files per country and region
try(source("script-stitch-country-data.R"), silent = T)
try(source("script-stitch-region-data.R"), silent = T)
df <- read.csv("lag_miscoding_PT.csv")
df <- read.csv("../data/miscoding/lag_miscoding_PT.csv")
df <- df[ordered(df$Miscoding),]
df <- df[-order(df$Miscoding),]
write.csv(df, "../data/miscoding/lag_miscoding_PT-sorted.csv", row.names = F)
df <- read.csv("../data/miscoding/lag_miscoding_PT.csv")
df <- df[-order(df$Miscoding),]
write.csv(df, "../data/miscoding/lag_miscoding_PT-sorted.csv", row.names = F)
df <- read.csv("../data/miscoding/lag_miscoding_PT.csv")
df
df <- df[order(-df$Miscoding),]
df
write.csv(df, "../data/miscoding/lag_miscoding_PT-sorted.csv", row.names = F)
df <- read.csv("../data/miscoding/lag_miscoding_ES.csv")
df <- df[order(-df$Miscoding),]
write.csv(df, "../data/miscoding/lag_miscoding_ES-sorted.csv", row.names = F)
source('~/github/xprize/code/script-symp-to-death-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-anto.R', echo=TRUE)
source('~/github/xprize/code/script-ggplot-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-ggplot-baseline-vs-predicted-many-sync.R', echo=TRUE)
source('~/github/xprize/code/script-ggplot-baseline-vs-predicted-many-sync.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-ggplot-baseline-vs-predicted-many-sync.R', echo=TRUE)
source('~/github/xprize/code/script-ggplot-baseline-vs-predicted-many-sync.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-multicountry-V5-cutoff.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
debugSource('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
debugSource('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
joined$y
debugSource('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
debugSource('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
df
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
dt
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities.R', echo=TRUE)
source('~/github/xprize/code/script-ccfr-fatalities-region.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/estimates-regeneration-v2.R', echo=TRUE)
source("column-list.R")
#signals_to_try <- c(signals_umd,signals_ccfr)
#signals_to_try <- c(signals_umd,signals_ccfr,signals_nsum)
#signals_to_try <- signals_nsum
#signals_to_try <- signals_ccfr
#signals_to_try <- signals_umd_past_smooth
#signals_to_try <- c(umdapi_data,gmob_data)
#signals_to_try <- c(ox_data)
all_signals_to_try <- c(ox_data, owid_data,
gmob_data,
umdapi_data,
cmu_data,
fatal_data,
hosp_data,
W_data,
umdapi_data_smooth,
W_data_smooth)
iso_code_country <- "US"
all_df <- read.csv(paste0("../data/all_giant_df2/", iso_code_country, "-alldf.csv"))
all_signals_to_try
signals_to_try <- intersect(all_signals_to_try, colnames(all_df))
all_signals_to_try
colnames(all_df)
intersect(c("a", "b"), c("b"))
all_signals_to_try
colnames(all_df)
intersect(all_signals_to_try, colnames(all_df))
signals_to_try <- intersect(all_signals_to_try, colnames(all_df))
signals_to_try
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
#signals_to_try <- c(signals_umd,signals_ccfr)
#signals_to_try <- c(signals_umd,signals_ccfr,signals_nsum)
#signals_to_try <- signals_nsum
#signals_to_try <- signals_ccfr
#signals_to_try <- signals_umd_past_smooth
#signals_to_try <- c(umdapi_data,gmob_data)
#signals_to_try <- c(ox_data)
all_signals_to_try <- c(ox_data, owid_data,
gmob_data,
umdapi_data,
cmu_data,
fatal_data,
hosp_data,
W_data,
umdapi_data_smooth,
W_data_smooth)
iso_code_country <- "PT"
all_df <- read.csv(paste0("../data/all_giant_df2/", iso_code_country, "-alldf.csv"))
all_df <- all_df %>% mutate(date = as.Date(date))
signals_to_try <- intersect(all_signals_to_try, colnames(all_df))
signals_to_try <- signals_to_try[length(unique(all_df[[signals_to_try]])) > 1]
for (s in signals_to_try){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[signals_to_try != s]
}
}
signals_to_try
s <- "m1_wildcard"
lll <- unique(all_df[[s]])
lll
length(lll)
if (length(lll)< 2) {
signals_to_try <- signals_to_try[signals_to_try != s]
cat("yes")
}
if (length(lll)< 2) {
signals_to_try <- signals_to_try[-s]
cat("yes")
}
sss <- signals_to_try
for (s in sss){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[-s]
cat("yes")
}
}
#signals_to_try <- c(signals_umd,signals_ccfr)
#signals_to_try <- c(signals_umd,signals_ccfr,signals_nsum)
#signals_to_try <- signals_nsum
#signals_to_try <- signals_ccfr
#signals_to_try <- signals_umd_past_smooth
#signals_to_try <- c(umdapi_data,gmob_data)
#signals_to_try <- c(ox_data)
all_signals_to_try <- c(ox_data, owid_data,
gmob_data,
umdapi_data,
cmu_data,
fatal_data,
hosp_data,
W_data,
umdapi_data_smooth,
W_data_smooth)
source("column-list.R")
#signals_to_try <- c(signals_umd,signals_ccfr)
#signals_to_try <- c(signals_umd,signals_ccfr,signals_nsum)
#signals_to_try <- signals_nsum
#signals_to_try <- signals_ccfr
#signals_to_try <- signals_umd_past_smooth
#signals_to_try <- c(umdapi_data,gmob_data)
#signals_to_try <- c(ox_data)
all_signals_to_try <- c(ox_data, owid_data,
gmob_data,
umdapi_data,
cmu_data,
fatal_data,
hosp_data,
W_data,
umdapi_data_smooth,
W_data_smooth)
iso_code_country <- "PT"
all_df <- read.csv(paste0("../data/all_giant_df2/", iso_code_country, "-alldf.csv"))
all_df <- all_df %>% mutate(date = as.Date(date))
## Libraries
library(dplyr)
library(stringr)
library(zoo) # to use rollmean
library(foreign)
library(MASS)
library(ggplot2)
library(grid) # annotate a ggplot
library(Metrics)
library(mpath) # lasso/elastic-net
library(caret)
library(gsubfn)
## Libraries
library(dplyr)
library(stringr)
library(zoo) # to use rollmean
library(foreign)
library(MASS)
library(ggplot2)
library(grid) # annotate a ggplot
library(Metrics)
library(mpath) # lasso/elastic-net
library(caret)
library(gsubfn)
source("column-list.R")
#signals_to_try <- c(signals_umd,signals_ccfr)
#signals_to_try <- c(signals_umd,signals_ccfr,signals_nsum)
#signals_to_try <- signals_nsum
#signals_to_try <- signals_ccfr
#signals_to_try <- signals_umd_past_smooth
#signals_to_try <- c(umdapi_data,gmob_data)
#signals_to_try <- c(ox_data)
all_signals_to_try <- c(ox_data, owid_data,
gmob_data,
umdapi_data,
cmu_data,
fatal_data,
hosp_data,
W_data,
umdapi_data_smooth,
W_data_smooth)
iso_code_country <- "PT"
all_df <- read.csv(paste0("../data/all_giant_df2/", iso_code_country, "-alldf.csv"))
all_df <- all_df %>% mutate(date = as.Date(date))
signals_to_try <- intersect(all_signals_to_try, colnames(all_df))
sss <- signals_to_try
for (s in sss){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[-s]
cat("yes")
}
}
for (s in sss){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[signals_to_try != s]
cat("yes")
}
}
for (s in signals_to_try){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[signals_to_try != s]
}
}
all_df <- read.csv(paste0("../data/all_giant_df2/", iso_code_country, "-alldf.csv"))
all_df <- all_df %>% mutate(date = as.Date(date))
signals_to_try <- intersect(all_signals_to_try, colnames(all_df))
sss <- signals_to_try
for (s in signals_to_try){
lll <- unique(all_df[[s]])
if (length(lll)< 2) {
signals_to_try <- signals_to_try[signals_to_try != s]
}
}
signals_to_try
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/script-symp-to-death-correlation-anto.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/script-get-oxford-data.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
seq(5 , 9)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-country-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/script-stitch-region-data.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-linear.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
install.packages("forecast")
install.packages(c("forecast", "fpp2", "TTR"))
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-poly.R', echo=TRUE)
source('~/github/xprize/code/forecast-strawman.R', echo=TRUE)
## script needs file for country and country population.
library(tidyverse)
library(readxl)
library(httr)
# Download data from the Oxford site
try(source("script-get-oxford-data.R"), silent = T)
# Download data from the Our World in Data site
try(source("script-get-owid-data.R"), silent = T)
# Download data from the UMD site using the API. Includes smoothing (not past smoothing, too slow)
try(source("script-get-umd-data-country.R"), silent = T)
# Download the data about confirmed cases, deaths, hospital, icu, etc. and accumulate for weeks
try(source("script-confirmed2.R"), silent = T) # Downloads all country cases and deaths from ECDC
try(source("script-confirmed-hospital.R"), silent = T) # Downloads hospital and ICU occupancy from ECDC
# Compute CCFR fatalities estimates
try(source("script-ccfr-fatalities-country.R"), silent = T) # Generates CCFR fatalities estimates for all countries from Oxford data
try(source("script-ccfr-fatalities-region.R"), silent = T) # Generates CCFR fatalities estimates for all countries from Oxford data
# Compute estimates from the CoronaSurveys responses
try(source("script-W-v2.R"), silent = T)
#try(source("script-W-past-smooth.R"), silent = T)  # Uses smooth_column-v2.R
try(source("script-W-smooth.R"), silent = T)  # Uses smooth_column-v2.R
# Download data from the CMU Covidcast site: US states data
try(source("script-get-CMU-covidcast-data2.R"), silent = T)
# Download data from Gloogle mobility
try(source("script-get-google-mobility-data.R"), silent = T)
# Merge data into giant CSV files per country and region
try(source("script-stitch-country-data.R"), silent = T)
try(source("script-stitch-region-data.R"), silent = T)
source('~/github/xprize/code/script-get-CMU-covidcast-data2.R', echo=TRUE)
source('~/github/xprize/code/script-get-CMU-covidcast-data2.R', echo=TRUE)
# Merge data into giant CSV files per country and region
try(source("script-stitch-country-data.R"), silent = T)
try(source("script-stitch-region-data.R"), silent = T)
